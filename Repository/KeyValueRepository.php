<?php

/*
 * This file is part of the Lib
 *
 * Copyright (C) 2017 pineray
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\Lib\Repository;

use Doctrine\ORM\EntityRepository;
use Eccube\Application;
use Plugin\Lib\Entity\KeyValue;

/**
 * KeyValueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class KeyValueRepository extends EntityRepository
{
    /**
     * @var string
     */
    protected $collection;

    /**
     * @var \Eccube\Application
     */
    protected $app;

    /**
     * @param \Eccube\Application $app
     */
    public function setApplication(Application $app)
    {
        $this->app = $app;
    }

    /**
     * @param string $collection
     */
    public function setCollection($collection)
    {
        $this->collection = $collection;
    }

    /**
     * @return string
     */
    public function getCollection()
    {
        return $this->collection;
    }

    /**
     * @return array
     */
    public function getAll()
    {
        $options = $this->app['config']['doctrine_cache'];
        $lifetime = $options['result_cache']['lifetime'];

        $qb = $this->createQueryBuilder('kv')
            ->where('kv.collection = :collection')
            ->setParameter('collection', $this->collection);
        $values = $qb->getQuery()
            ->useResultCache(true, $lifetime)
            ->getResult();

        $return = [];
        foreach ($values as $value)
        {
            $return[$value->getName()] = unserialize(stream_get_contents($value->getValue()));
        }

        return $return;
    }

    /**
     * @param string $key
     * @param mixed $value
     * @return bool
     */
    public function set($key, $value)
    {
        return $this->setMultiple([$key => $value]);
    }

    /**
     * @param array $data
     * @return bool
     */
    public function setMultiple(array $data)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            foreach ($data as $key => $value) {
                $target = $this->find(['collection' => $this->collection, 'name' => $key]);
                if (!$target) {
                    $target = new KeyValue();
                    $target->setCollection($this->collection);
                    $target->setName($key);
                }
                $target->setValue(serialize($value));
                $em->persist($target);
            }
            $em->flush();
            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            return false;
        }

        return true;
    }

    /**
     * @param string $key
     * @return bool
     */
    public function delete($key)
    {
        return $this->deleteMultiple([$key]);
    }

    /**
     * @param array $keys
     * @return bool
     */
    public function deleteMultiple(array $keys)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            foreach ($keys as $key) {
                $target = $this->find(['collection' => $this->collection, 'name' => $key]);
                if ($target) {
                    $em->remove($target);
                }
            }
            $em->flush();
            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollback();
            return false;
        }

        return true;
    }
}